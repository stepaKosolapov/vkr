# Copyright (c) 1997 Regents of the University of California.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University nor of the Laboratory may be used
#    to endorse or promote products derived from this software without
#    specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# A simplified script that shows a mobility trace for one mobile node,
# generated by the BonnMotion mobility tool.  The output mobility
# trace is sent to bonnmotion_example.tr.  There are two additional files,
# generated by BonnMotion, that provide metadata about the mobility:
# bonnmotion.params and bonnmotion.ns_params.  These two files are not
# used in the simulation.  The ns-2 node objects are only constructed
# to the level required to run the mobility.  For a more complete
# example using wireless models and protocols, but using a different
# trace file, see wireless-test.tcl, from which this script was adapted. 
#
# Adapted from wireless-test.tcl

# ======================================================================
# Default Script Options
# ======================================================================


set opt(x)		400	;# X dimension of the topography
set opt(y)		200		;# Y dimension of the topography
set opt(sc)		"bonnmotion.ns_movements"

set opt(nn)		1		;# number of nodes
set opt(seed)		0.0
set opt(stop)		1000.0		;# simulation time
set opt(tr)		bonnmotion-example.tr		;# trace file
set opt(lm)             "on"           ;# log movement
set opt(chan)           Channel/WirelessChannel

# ======================================================================


proc log-movement {} {
    global logtimer ns_ ns

    set ns $ns_
    source ../mobility/timer.tcl
    Class LogTimer -superclass Timer
    LogTimer instproc timeout {} {
	global opt node_;
	for {set i 0} {$i < $opt(nn)} {incr i} {
	    $node_($i) log-movement
	}
	$self sched 100
    }

    set logtimer [new LogTimer]
    $logtimer sched 100
}

# ======================================================================
# Main Program
# ======================================================================

#
# Source External TCL Scripts
#
# source ../lib/ns-mobilenode.tcl

if {$opt(seed) > 0} {
	puts "Seeding Random number generator with $opt(seed)\n"
	ns-random $opt(seed)
}

#
# Initialize Global Variables
#
set ns_		[new Simulator]
set tracefd	[open $opt(tr) w]
set topo        [new Topography]
set chan        [new $opt(chan)]


$topo load_flatgrid $opt(x) $opt(y)
$topo channel $chan

#
# log the mobile nodes movements if desired
#
if { $opt(lm) == "on" } {
    log-movement
}

#
#  Create the specified number of nodes $opt(nn) 
#
for {set i 0} {$i < $opt(nn) } {incr i} {
    set node_($i) [new Node/MobileNode]
    $node_($i) random-motion 0           ;# disable random motion
    $node_($i) topography $topo
    set T [new Trace/Generic]
    $T target [$ns_ set nullAgent_]
    $T attach $tracefd
    $T set src_ [$node_($i) id]
    $node_($i) log-target $T
    $ns_ at $opt(stop).000000001 "$node_($i) reset";
    }

# Load scenario file
source $opt(sc)

$ns_ at $opt(stop).000000001 "$node_(0) reset";
$ns_ at $opt(stop).1 "puts \"NS EXITING...\" ; $ns_ halt"
$ns_ at $opt(stop) "stop"

puts "Starting Simulation..."
$ns_ run

proc stop {} {
    global ns_ f nf
    $ns_ flush-trace
    close $f
    close $nf
}
